uid: ""
path: ""
type: scripts
name: danger_area
version: v0.0.1
scripts:
    - uuid: 7ed196ce-e9fd-4e5d-882b-03b509bdab25
      name: danger_area
      desc: 'Create fail event if a person is found inside "danger" region. The script stabilizes the detector: true detection only happens when numDetectsLimit is reached.'
      enabled: false
      source: "// Create fail event if a person is found inside \"danger\" region\n// The script stabilizes the detector: true detection only happens when numDetectsLimit is reached. \n// Main script parameters:\n//      reportsPeriodSec - minimum time period between two consecutive events\n//      numDetectsLimit - number of detections needed for \"true\" detection. Higher limit reduces false positive detections\n//      numNoDetectsLimit - if this limit is reached, current number of detections is reset. Lower limit reduces false positive detections\n\n// @public type:number default:30\nvar reportsPeriodSec = 30\n\n//@public type:string default:\"danger\"\nvar regionName = \"danger\"\n\nvar numDetectsLimit = 5\nvar numNoDetectsLimit = 5\nvar statusString = \"Person in danger area\"\n\nvar globalRegionsData = {}\n\nfunction createFailEvent(frame, item) {\n    frame.Save()\n    var event = rtmip.NewEvent(frame, item)\n    event.Status = statusString\n    event.State = \"fail\"\n    rtmip.StoreEvent(event)\n}\n\nfunction main(frame) {\n    var regions = rtmip.GetCameraRegions(frame)\n    var cameraRegions = []\n\n    // filter regions by regionName\n    for (var i in regions) {\n        var region = regions[i]\n        if (region.Name == regionName) {\n            cameraRegions.push(region)\n        }\n    }\n\n    for (var j in cameraRegions) {\n        var regionidx = \"\" + frame.Camera.ID + cameraRegions[j].ID\n\n        // initialize new regionData\n        if (!globalRegionsData[regionidx]) {\n            globalRegionsData[regionidx] = {\n                \"numDetects\": 0,\n                \"numNoDetects\": 0,\n                \"name\": cameraRegions[j].Name,\n                \"lastReport\": 0,\n            }\n        }\n\n        var regionData = globalRegionsData[regionidx]\n\n        // check if any item is in regionName region\n        var gotDetect = false\n        for (var i in frame.Items) {\n            var item = frame.Items[i]\n            var anchorPoint = item.BBox.AnchorPoint(5)\n            var x = anchorPoint[0]\n            var y = anchorPoint[1]\n\n            if (cameraRegions[j].Contains(x, y)) {\n                item.State = \"fail\"\n                gotDetect = true\n            }\n        }\n\n        // accumulate numDetects in case of gotDetect (up to numDetectsLimit)\n        // accumulate numNoDetects otherwise (up to numNoDetectsLimit)\n        if (gotDetect) {\n            regionData[\"numDetects\"] = Math.min(regionData[\"numDetects\"] + 1, numDetectsLimit)\n            regionData[\"numNoDetects\"] = Math.max(0, regionData[\"numNoDetects\"] - 1)\n        } else {\n            regionData[\"numDetects\"] = Math.max(0, regionData[\"numDetects\"] - 1)\n            regionData[\"numNoDetects\"] = Math.min(regionData[\"numNoDetects\"] + 1, numNoDetectsLimit)\n        }\n        \n        // if numNoDetects is reached, consider it true NoDetect\n        if (regionData[\"numNoDetects\"] >= numNoDetectsLimit) {\n            regionData[\"numDetects\"] = 0\n        // if numDetects is reached, consider it true Detect\n        } else if (regionData[\"numDetects\"] >= numDetectsLimit) {\n            regionData[\"numNoDetects\"] = 0\n            \n            // create reports with reportsPeriodSec frequency\n            if (frame.Time - regionData[\"lastReport\"] >= reportsPeriodSec) {\n                frame.Status = statusString\n                frame.State = \"fail\"\n                createFailEvent(frame, item)\n                regionData[\"lastReport\"] = frame.Time\n            }\n        }\n    }\n\n    return true\n}"
